import { IInputs, IOutputs } from "./generated/ManifestTypes";
import { EventHubConsumerClient, Subscription } from "@azure/event-hubs";

export class EventHubsListener implements ComponentFramework.StandardControl<IInputs, IOutputs> {

    // component properties
    private _context: ComponentFramework.Context<IInputs>;
    private _container: HTMLDivElement;

    // component methods
    private _notifyOutputChanged: () => void;

    // input properties
    private _connectionString: string;
    private _consumerGroup: string;
    private _eventHubName: string;

    // output properties
    private _eventBody: string;
    private _eventProperties: { [key: string]: any; } | undefined;

    // event hubs properties
    private _eventHubClient: EventHubConsumerClient | undefined;
    private _subscription: Subscription | undefined;

    // update view properties
    private _updateViewRequired: boolean = true;
    private _isInitialised: boolean = false;
    private _divContainer: HTMLDivElement;
    private _width: number;
    private _height: number;


    // svg strings
    private _disconnectedIcon: string = `<svg width="WIDTH" height="HEIGHT" viewBox="0 0 180 180" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M108.3 84.2014C108.328 84.8748 108.093 85.5326 107.646 86.0363C107.198 86.54 106.572 86.8502 105.9 86.9014H85.0001C84.3267 86.9293 83.6689 86.6947 83.1652 86.2469C82.6615 85.7992 82.3513 85.1734 82.3001 84.5014V68.9014C82.2722 68.2281 82.5069 67.5703 82.9546 67.0666C83.4023 66.5629 84.0281 66.2527 84.7001 66.2014H105.6C106.273 66.1736 106.931 66.4082 107.435 66.856C107.939 67.3037 108.249 67.9295 108.3 68.6014V84.2014Z" fill="#AD3333"/> <path d="M145.4 99.9999C145.428 100.673 145.193 101.331 144.745 101.835C144.297 102.338 143.672 102.649 143 102.7H122.1C121.426 102.728 120.769 102.493 120.265 102.045C119.761 101.598 119.451 100.972 119.4 100.3V84.7999C119.372 84.1265 119.606 83.4687 120.054 82.965C120.502 82.4613 121.128 82.1511 121.8 82.0999H142.7C143.373 82.072 144.031 82.3067 144.535 82.7544C145.038 83.2021 145.348 83.8279 145.4 84.4999V99.9999Z" fill="#AD3333"/> <path d="M108.3 116.002C108.328 116.676 108.093 117.333 107.646 117.837C107.198 118.341 106.572 118.651 105.9 118.702H85.0001C84.3267 118.73 83.6689 118.495 83.1652 118.048C82.6615 117.6 82.3513 116.974 82.3001 116.302V100.702C82.2722 100.029 82.5069 99.371 82.9546 98.8673C83.4023 98.3637 84.0281 98.0535 84.7001 98.0022H105.6C106.273 97.9744 106.931 98.209 107.435 98.6567C107.939 99.1045 108.249 99.7303 108.3 100.402V116.002Z" fill="#AD3333"/> <path d="M71.2002 68.4C71.2281 69.0469 71.004 69.6793 70.575 70.1643C70.146 70.6492 69.5456 70.9488 68.9002 71H47.4002C46.7426 71.0296 46.0982 70.8087 45.5971 70.3819C45.096 69.955 44.7755 69.354 44.7002 68.7V52.5C44.7229 51.8611 44.9802 51.253 45.4229 50.7918C45.8657 50.3307 46.4628 50.0488 47.1002 50H68.0002C70.2002 50 71.2002 51.1 71.2002 52.7V68.4Z" fill="#AD3333"/> <path d="M71.2002 100.002C71.2276 100.33 71.1897 100.661 71.0887 100.975C70.9878 101.288 70.8257 101.579 70.612 101.83C70.3982 102.081 70.1369 102.287 69.8431 102.437C69.5494 102.586 69.2289 102.676 68.9002 102.702H47.4002C47.0419 102.716 46.6845 102.655 46.3506 102.525C46.0166 102.394 45.7133 102.196 45.4598 101.942C45.2062 101.688 45.0078 101.385 44.8771 101.051C44.7464 100.717 44.6862 100.36 44.7002 100.002V84.2016C44.6983 83.5453 44.9446 82.9126 45.3897 82.4303C45.8349 81.9481 46.4459 81.652 47.1002 81.6016H68.0002C70.2002 81.6016 71.2002 82.7016 71.2002 84.2016V100.002Z" fill="#AD3333"/> <path d="M71.2003 131.902C71.2277 132.231 71.1898 132.562 71.0888 132.875C70.9878 133.189 70.8258 133.48 70.612 133.731C70.3983 133.982 70.137 134.188 69.8432 134.338C69.5495 134.487 69.229 134.577 68.9003 134.602H47.4003C46.727 134.63 46.0691 134.396 45.5654 133.948C45.0618 133.5 44.7516 132.874 44.7003 132.202V116.002C44.6869 115.674 44.7384 115.346 44.8518 115.038C44.9652 114.729 45.1383 114.446 45.3612 114.205C45.5841 113.963 45.8525 113.768 46.1509 113.63C46.4493 113.493 46.7719 113.415 47.1003 113.402H68.0003C70.2003 113.402 71.2003 114.402 71.2003 116.002V131.902Z" fill="#AD3333"/> <path d="M10.7001 15.1016H23.6001V51.1016C23.6001 51.8707 23.2946 52.6083 22.7507 53.1522C22.2068 53.696 21.4692 54.0016 20.7001 54.0016H7.90009C7.13096 54.0016 6.39333 53.696 5.84948 53.1522C5.30562 52.6083 5.00009 51.8707 5.00009 51.1016V21.1016C4.95933 20.3282 5.0766 19.5546 5.34474 18.828C5.61289 18.1015 6.02628 17.4372 6.55969 16.8757C7.0931 16.3142 7.73534 15.8673 8.4472 15.5623C9.15907 15.2573 9.92563 15.1005 10.7001 15.1016Z" fill="#999999"/> <path opacity="0.5" d="M10.7001 15.1016H23.6001V51.1016C23.6001 51.8707 23.2946 52.6083 22.7507 53.1522C22.2068 53.696 21.4692 54.0016 20.7001 54.0016H7.90009C7.13096 54.0016 6.39333 53.696 5.84948 53.1522C5.30562 52.6083 5.00009 51.8707 5.00009 51.1016V21.1016C4.95933 20.3282 5.0766 19.5546 5.34474 18.828C5.61289 18.1015 6.02628 17.4372 6.55969 16.8757C7.0931 16.3142 7.73534 15.8673 8.4472 15.5623C9.15907 15.2573 9.92563 15.1005 10.7001 15.1016Z" fill="#999999"/> <path d="M156.4 15.1016H169.3C170.812 15.1016 172.261 15.7021 173.33 16.7711C174.399 17.84 175 19.2898 175 20.8016V50.8016C175 51.5707 174.694 52.3083 174.15 52.8522C173.607 53.396 172.869 53.7016 172.1 53.7016H159.2C158.431 53.7016 157.693 53.396 157.149 52.8522C156.605 52.3083 156.3 51.5707 156.3 50.8016V15.1016H156.4Z" fill="#999999"/> <path opacity="0.5" d="M156.4 15.1016H169.3C170.812 15.1016 172.261 15.7021 173.33 16.7711C174.399 17.84 175 19.2898 175 20.8016V50.8016C175 51.5707 174.694 52.3083 174.15 52.8522C173.607 53.396 172.869 53.7016 172.1 53.7016H159.2C158.431 53.7016 157.693 53.396 157.149 52.8522C156.605 52.3083 156.3 51.5707 156.3 50.8016V15.1016H156.4Z" fill="#999999"/> <path d="M175 20.8016V33.3016H5V20.8016C5 19.2898 5.60053 17.84 6.66948 16.7711C7.73844 15.7021 9.18826 15.1016 10.7 15.1016L169.4 15.1016C170.894 15.1278 172.319 15.7399 173.366 16.806C174.413 17.8721 175 19.307 175 20.8016Z" fill="#949494"/> <path d="M7.9 127.602H20.8C21.5691 127.602 22.3068 127.907 22.8506 128.451C23.3945 128.995 23.7 129.733 23.7 130.502V166.502H10.7C9.18827 166.502 7.73845 165.901 6.66949 164.832C5.60053 163.763 5 162.314 5 160.802V130.002C5.11888 129.322 5.47616 128.707 6.00768 128.267C6.5392 127.828 7.21014 127.592 7.9 127.602Z" fill="#999999"/> <path opacity="0.5" d="M7.9 127.602H20.8C21.5691 127.602 22.3068 127.907 22.8506 128.451C23.3945 128.995 23.7 129.733 23.7 130.502V166.502H10.7C9.18827 166.502 7.73845 165.901 6.66949 164.832C5.60053 163.763 5 162.314 5 160.802V130.002C5.11888 129.322 5.47616 128.707 6.00768 128.267C6.5392 127.828 7.21014 127.592 7.9 127.602Z" fill="#999999"/> <path d="M159.2 127.602H172.1C172.87 127.602 173.607 127.907 174.151 128.451C174.695 128.995 175 129.732 175 130.502V160.502C175 162.013 174.4 163.463 173.331 164.532C172.262 165.601 170.812 166.202 169.3 166.202H156.4V130.002C156.516 129.339 156.859 128.737 157.37 128.299C157.881 127.861 158.528 127.615 159.2 127.602Z" fill="#999999"/> <path opacity="0.5" d="M159.2 127.602H172.1C172.87 127.602 173.607 127.907 174.151 128.451C174.695 128.995 175 129.732 175 130.502V160.502C175 162.013 174.4 163.463 173.331 164.532C172.262 165.601 170.812 166.202 169.3 166.202H156.4V130.002C156.516 129.339 156.859 128.737 157.37 128.299C157.881 127.861 158.528 127.615 159.2 127.602Z" fill="#999999"/> <path d="M5 160.8L5 148.3H175V160.8C175 162.312 174.399 163.762 173.331 164.831C172.262 165.899 170.812 166.5 169.3 166.5H10.7C9.18827 166.5 7.73845 165.899 6.66949 164.831C5.60054 163.762 5 162.312 5 160.8Z" fill="#949494"/> </svg>`;
    private _connectedIcon = `<svg width="WIDTH" height="HEIGHT" viewBox="0 0 180 180" fill="none" xmlns="http://www.w3.org/2000/svg"> <path d="M108.3 84.2014C108.328 84.8748 108.093 85.5326 107.646 86.0363C107.198 86.54 106.572 86.8502 105.9 86.9014H85.0001C84.3267 86.9293 83.6689 86.6947 83.1652 86.2469C82.6615 85.7992 82.3513 85.1734 82.3001 84.5014V68.9014C82.2722 68.2281 82.5069 67.5703 82.9546 67.0666C83.4023 66.5629 84.0281 66.2527 84.7001 66.2014H105.6C106.273 66.1736 106.931 66.4082 107.435 66.856C107.939 67.3037 108.249 67.9295 108.3 68.6014V84.2014Z" fill="#76BC2D"/> <path d="M145.4 99.9999C145.428 100.673 145.193 101.331 144.745 101.835C144.297 102.338 143.672 102.649 143 102.7H122.1C121.426 102.728 120.769 102.493 120.265 102.045C119.761 101.598 119.451 100.972 119.4 100.3V84.7999C119.372 84.1265 119.606 83.4687 120.054 82.965C120.502 82.4613 121.128 82.1511 121.8 82.0999H142.7C143.373 82.072 144.031 82.3067 144.535 82.7544C145.038 83.2021 145.348 83.8279 145.4 84.4999V99.9999Z" fill="#76BC2D"/> <path d="M108.3 116.002C108.328 116.676 108.093 117.333 107.646 117.837C107.198 118.341 106.572 118.651 105.9 118.702H85.0001C84.3267 118.73 83.6689 118.495 83.1652 118.048C82.6615 117.6 82.3513 116.974 82.3001 116.302V100.702C82.2722 100.029 82.5069 99.371 82.9546 98.8673C83.4023 98.3637 84.0281 98.0535 84.7001 98.0022H105.6C106.273 97.9744 106.931 98.209 107.435 98.6567C107.939 99.1045 108.249 99.7303 108.3 100.402V116.002Z" fill="#76BC2D"/> <path d="M71.2002 68.4C71.2281 69.0469 71.004 69.6793 70.575 70.1643C70.146 70.6492 69.5456 70.9488 68.9002 71H47.4002C46.7426 71.0296 46.0982 70.8087 45.5971 70.3819C45.096 69.955 44.7755 69.354 44.7002 68.7V52.5C44.7229 51.8611 44.9802 51.253 45.4229 50.7918C45.8657 50.3307 46.4628 50.0488 47.1002 50H68.0002C70.2002 50 71.2002 51.1 71.2002 52.7V68.4Z" fill="#86D633"/> <path d="M71.2002 100.002C71.2276 100.33 71.1897 100.661 71.0887 100.975C70.9878 101.288 70.8257 101.579 70.612 101.83C70.3982 102.081 70.1369 102.287 69.8431 102.437C69.5494 102.586 69.2289 102.676 68.9002 102.702H47.4002C47.0419 102.716 46.6845 102.655 46.3506 102.525C46.0166 102.394 45.7133 102.196 45.4598 101.942C45.2062 101.688 45.0078 101.385 44.8771 101.051C44.7464 100.717 44.6862 100.36 44.7002 100.002V84.2016C44.6983 83.5453 44.9446 82.9126 45.3897 82.4303C45.8349 81.9481 46.4459 81.652 47.1002 81.6016H68.0002C70.2002 81.6016 71.2002 82.7016 71.2002 84.2016V100.002Z" fill="#76BC2D"/> <path d="M71.2003 131.902C71.2277 132.231 71.1898 132.562 71.0888 132.875C70.9878 133.189 70.8258 133.48 70.612 133.731C70.3983 133.982 70.137 134.188 69.8432 134.338C69.5495 134.487 69.229 134.577 68.9003 134.602H47.4003C46.727 134.63 46.0691 134.396 45.5654 133.948C45.0618 133.5 44.7516 132.874 44.7003 132.202V116.002C44.6869 115.674 44.7384 115.346 44.8518 115.038C44.9652 114.729 45.1383 114.446 45.3612 114.205C45.5841 113.963 45.8525 113.768 46.1509 113.63C46.4493 113.493 46.7719 113.415 47.1003 113.402H68.0003C70.2003 113.402 71.2003 114.402 71.2003 116.002V131.902Z" fill="#76BC2D"/> <path d="M10.7001 15.1016H23.6001V51.1016C23.6001 51.8707 23.2946 52.6083 22.7507 53.1522C22.2068 53.696 21.4692 54.0016 20.7001 54.0016H7.90009C7.13096 54.0016 6.39333 53.696 5.84948 53.1522C5.30562 52.6083 5.00009 51.8707 5.00009 51.1016V21.1016C4.95933 20.3282 5.0766 19.5546 5.34474 18.828C5.61289 18.1015 6.02628 17.4372 6.55969 16.8757C7.0931 16.3142 7.73534 15.8673 8.4472 15.5623C9.15907 15.2573 9.92563 15.1005 10.7001 15.1016Z" fill="#999999"/> <path opacity="0.5" d="M10.7001 15.1016H23.6001V51.1016C23.6001 51.8707 23.2946 52.6083 22.7507 53.1522C22.2068 53.696 21.4692 54.0016 20.7001 54.0016H7.90009C7.13096 54.0016 6.39333 53.696 5.84948 53.1522C5.30562 52.6083 5.00009 51.8707 5.00009 51.1016V21.1016C4.95933 20.3282 5.0766 19.5546 5.34474 18.828C5.61289 18.1015 6.02628 17.4372 6.55969 16.8757C7.0931 16.3142 7.73534 15.8673 8.4472 15.5623C9.15907 15.2573 9.92563 15.1005 10.7001 15.1016Z" fill="#999999"/> <path d="M156.4 15.1016H169.3C170.812 15.1016 172.261 15.7021 173.33 16.7711C174.399 17.84 175 19.2898 175 20.8016V50.8016C175 51.5707 174.694 52.3083 174.15 52.8522C173.607 53.396 172.869 53.7016 172.1 53.7016H159.2C158.431 53.7016 157.693 53.396 157.149 52.8522C156.605 52.3083 156.3 51.5707 156.3 50.8016V15.1016H156.4Z" fill="#999999"/> <path opacity="0.5" d="M156.4 15.1016H169.3C170.812 15.1016 172.261 15.7021 173.33 16.7711C174.399 17.84 175 19.2898 175 20.8016V50.8016C175 51.5707 174.694 52.3083 174.15 52.8522C173.607 53.396 172.869 53.7016 172.1 53.7016H159.2C158.431 53.7016 157.693 53.396 157.149 52.8522C156.605 52.3083 156.3 51.5707 156.3 50.8016V15.1016H156.4Z" fill="#999999"/> <path d="M175 20.8016V33.3016H5V20.8016C5 19.2898 5.60053 17.84 6.66948 16.7711C7.73844 15.7021 9.18826 15.1016 10.7 15.1016L169.4 15.1016C170.894 15.1278 172.319 15.7399 173.366 16.806C174.413 17.8721 175 19.307 175 20.8016Z" fill="#949494"/> <path d="M7.9 127.602H20.8C21.5691 127.602 22.3068 127.907 22.8506 128.451C23.3945 128.995 23.7 129.733 23.7 130.502V166.502H10.7C9.18827 166.502 7.73845 165.901 6.66949 164.832C5.60053 163.763 5 162.314 5 160.802V130.002C5.11888 129.322 5.47616 128.707 6.00768 128.267C6.5392 127.828 7.21014 127.592 7.9 127.602Z" fill="#999999"/> <path opacity="0.5" d="M7.9 127.602H20.8C21.5691 127.602 22.3068 127.907 22.8506 128.451C23.3945 128.995 23.7 129.733 23.7 130.502V166.502H10.7C9.18827 166.502 7.73845 165.901 6.66949 164.832C5.60053 163.763 5 162.314 5 160.802V130.002C5.11888 129.322 5.47616 128.707 6.00768 128.267C6.5392 127.828 7.21014 127.592 7.9 127.602Z" fill="#999999"/> <path d="M159.2 127.602H172.1C172.87 127.602 173.607 127.907 174.151 128.451C174.695 128.995 175 129.732 175 130.502V160.502C175 162.013 174.4 163.463 173.331 164.532C172.262 165.601 170.812 166.202 169.3 166.202H156.4V130.002C156.516 129.339 156.859 128.737 157.37 128.299C157.881 127.861 158.528 127.615 159.2 127.602Z" fill="#999999"/> <path opacity="0.5" d="M159.2 127.602H172.1C172.87 127.602 173.607 127.907 174.151 128.451C174.695 128.995 175 129.732 175 130.502V160.502C175 162.013 174.4 163.463 173.331 164.532C172.262 165.601 170.812 166.202 169.3 166.202H156.4V130.002C156.516 129.339 156.859 128.737 157.37 128.299C157.881 127.861 158.528 127.615 159.2 127.602Z" fill="#999999"/> <path d="M5 160.8L5 148.3H175V160.8C175 162.312 174.399 163.762 173.331 164.831C172.262 165.899 170.812 166.5 169.3 166.5H10.7C9.18827 166.5 7.73845 165.899 6.66949 164.831C5.60054 163.762 5 162.312 5 160.8Z" fill="#949494"/> </svg>`;

    constructor()
    {

    }

    public init(context: ComponentFramework.Context<IInputs>, notifyOutputChanged: () => void, state: ComponentFramework.Dictionary, container:HTMLDivElement): void
    {
        // Add control initialization code
        this._context = context;
        this._container = container;
        this._notifyOutputChanged = notifyOutputChanged;

        // update the view
        this._context.mode.trackContainerResize(true);
        this._updateViewRequired = true;

        // parse input properties
        this.parseInputProperties();
    }


    public updateView(context: ComponentFramework.Context<IInputs>): void
    {
        //do we need to update the view?
        if(!this._updateViewRequired) return;

        this._width = context.mode.allocatedWidth;
        this._height = context.mode.allocatedHeight;

        // Add code to initialse the control
        if(this._container && !this._isInitialised)
        {
            this._divContainer = document.createElement("div");
            this._container.append(this._divContainer );
            this._isInitialised = true;
            
            // start listening to the Event Hubs
            this.startListening();
        }
        this._updateViewRequired = false;
    }

    public getOutputs(): IOutputs
    {
        return {
            "eventBody": JSON.stringify(this._eventBody)
        };
    }

    public destroy(): void
    {
        // Add code to cleanup control if necessary
        this.stopListening();
    }


    //
    // Custom methods
    //

    private parseInputProperties(): void
    {
        // parse input properties
        this._connectionString = this._context.parameters.connectionString.raw || "";
        this._consumerGroup = this._context.parameters.consumerGroup.raw || "";
        this._eventHubName = this._context.parameters.eventHubName.raw || "";
    }

    private async createClient(): Promise<void> {
        try {
            this._eventHubClient = new EventHubConsumerClient(this._consumerGroup, this._connectionString, this._eventHubName);
            let svgString = this._connectedIcon;
            svgString = svgString.replace(/WIDTH="\d+"/, `WIDTH="${this._width}"`);
            svgString = svgString.replace(/HEIGHT="\d+"/, `HEIGHT="${this._height}"`);
            if(this._divContainer) this._divContainer.innerHTML = svgString;
        } catch (error) {
            let svgString = this._disconnectedIcon;
            svgString = svgString.replace(/WIDTH="\d+"/, `WIDTH="${this._width}"`);
            svgString = svgString.replace(/HEIGHT="\d+"/, `HEIGHT="${this._height}"`);
            if(this._divContainer) this._divContainer.innerHTML = svgString;
            console.error(`Error creating EventHubConsumerClient: ${error}`);
        } 
    }

    private async startListening(): Promise<void> {
        await this.createClient();

        if (this._eventHubClient) {
            this._subscription = this._eventHubClient.subscribe({
                processEvents: async (events, context) => {
                    for (const event of events) {
                        console.log(`Received event: ${JSON.stringify(event.body)}`);

                        this._eventBody = event.body;
                        this._eventProperties = event.properties;

                        console.log(`Event system properties:`);
                        if (event.properties && typeof event.properties === 'object') {
                            Object.entries(event.properties).forEach(([key, value]: [string, any]) => {
                                console.log(`Event property: ${key}: ${value}`);
                            });
                        }
                        
                        this._notifyOutputChanged();
                    }
                },
                processError: async (err, context) => {
                    console.error(`Error: ${err}`);
                }
            });
        }
    }

    private stopListening(): void
    {
        // stop listening to the Event
        if(this._subscription) this._subscription.close();
        if(this._eventHubClient) this._eventHubClient.close();
    }
}
